diff --git a/train/common/logger.py b/train/common/logger.py
index bff0f90..3cab4db 100644
--- a/train/common/logger.py
+++ b/train/common/logger.py
@@ -15,17 +15,18 @@ class Logger(object):
 
     def __init__(self, log_dir):
         """Create a summary writer logging to log_dir."""
-        self.writer = tf.summary.FileWriter(log_dir)
+        self.writer = tf.summary.create_file_writer(log_dir)
 
     def scalar_summary(self, tag, value, step):
         """Log a scalar variable."""
-        summary = tf.Summary(
-            value=[tf.Summary.Value(tag=tag, simple_value=value)])
-        self.writer.add_summary(summary, step)
-        self.writer.flush()
+        return
+        with self.writer.as_default():
+            tf.summary.scalar(tag, value, step=step)
+            self.writer.flush()
 
     def image_summary(self, tag, images, step):
         """Log a list of images."""
+        return
 
         img_summaries = []
         for i, img in enumerate(images):
@@ -37,20 +38,21 @@ class Logger(object):
             scipy.misc.toimage(img).save(s, format="png")
 
             # Create an Image object
-            img_sum = tf.Summary.Image(encoded_image_string=s.getvalue(),
+            img_sum = tf.summary.Image(encoded_image_string=s.getvalue(),
                                        height=img.shape[0],
                                        width=img.shape[1])
             # Create a Summary value
-            img_summaries.append(tf.Summary.Value(
-                tag='%s/%d' % (tag, i), image=img_sum))
+            img_summaries.append(tf.summary.scalar(
+                '%s/%d' % (tag, i), image=img_sum))
 
         # Create and write Summary
-        summary = tf.Summary(value=img_summaries)
+        summary = tf.nummary(value=img_summaries)
         self.writer.add_summary(summary, step)
         self.writer.flush()
 
     def histo_summary(self, tag, values, step, bins=1000):
         """Log a histogram of the tensor of values."""
+        return
 
         # Create a histogram using numpy
         counts, bin_edges = np.histogram(values, bins=bins)
@@ -73,6 +75,6 @@ class Logger(object):
             hist.bucket.append(c)
 
         # Create and write Summary
-        summary = tf.Summary(value=[tf.Summary.Value(tag=tag, histo=hist)])
-        self.writer.add_summary(summary, step)
-        self.writer.flush()
+        with self.writer.as_default():
+            tf.summary.scalar(tag, histo=hist, step=step)
+            self.writer.flush()
